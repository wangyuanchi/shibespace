// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: threads.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createThread = `-- name: CreateThread :one
INSERT INTO threads (title, content, tags, creator_id)
VALUES ($1, $2, $3, $4)
RETURNING id, title, content, tags, creator_id, created_timestamp, updated_timestamp
`

type CreateThreadParams struct {
	Title     string
	Content   string
	Tags      []string
	CreatorID uuid.UUID
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, createThread,
		arg.Title,
		arg.Content,
		pq.Array(arg.Tags),
		arg.CreatorID,
	)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		pq.Array(&i.Tags),
		&i.CreatorID,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
	)
	return i, err
}

const deleteThread = `-- name: DeleteThread :one
DELETE FROM threads
WHERE id = $1
RETURNING id, title, content, tags, creator_id, created_timestamp, updated_timestamp
`

func (q *Queries) DeleteThread(ctx context.Context, id int32) (Thread, error) {
	row := q.db.QueryRowContext(ctx, deleteThread, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		pq.Array(&i.Tags),
		&i.CreatorID,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
	)
	return i, err
}

const getThread = `-- name: GetThread :one
SELECT id, title, content, tags, creator_id, created_timestamp, updated_timestamp FROM threads
WHERE id = $1
`

func (q *Queries) GetThread(ctx context.Context, id int32) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThread, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		pq.Array(&i.Tags),
		&i.CreatorID,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
	)
	return i, err
}

const getThreadCreatorID = `-- name: GetThreadCreatorID :one
SELECT creator_id FROM threads
WHERE id = $1
`

func (q *Queries) GetThreadCreatorID(ctx context.Context, id int32) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getThreadCreatorID, id)
	var creator_id uuid.UUID
	err := row.Scan(&creator_id)
	return creator_id, err
}

const getThreadsPaginated = `-- name: GetThreadsPaginated :many
SELECT id, title, content, tags, creator_id, created_timestamp, updated_timestamp FROM threads
WHERE ARRAY(SELECT LOWER(t) FROM UNNEST(tags) AS t) @> 
ARRAY(SELECT LOWER(t) FROM UNNEST($1::VARCHAR(35)[]) AS t)
ORDER BY updated_timestamp DESC 
LIMIT $2 OFFSET $3
`

type GetThreadsPaginatedParams struct {
	Column1 []string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetThreadsPaginated(ctx context.Context, arg GetThreadsPaginatedParams) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, getThreadsPaginated, pq.Array(arg.Column1), arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			pq.Array(&i.Tags),
			&i.CreatorID,
			&i.CreatedTimestamp,
			&i.UpdatedTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThreadsPaginatedCount = `-- name: GetThreadsPaginatedCount :one
SELECT COUNT(*) FROM threads
WHERE ARRAY(SELECT LOWER(t) FROM UNNEST(tags) AS t) @> 
ARRAY(SELECT LOWER(t) FROM UNNEST($1::VARCHAR(35)[]) AS t)
`

func (q *Queries) GetThreadsPaginatedCount(ctx context.Context, dollar_1 []string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getThreadsPaginatedCount, pq.Array(dollar_1))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateThreadContent = `-- name: UpdateThreadContent :one
UPDATE threads
SET content = $2, updated_timestamp = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING content, updated_timestamp
`

type UpdateThreadContentParams struct {
	ID      int32
	Content string
}

type UpdateThreadContentRow struct {
	Content          string
	UpdatedTimestamp time.Time
}

func (q *Queries) UpdateThreadContent(ctx context.Context, arg UpdateThreadContentParams) (UpdateThreadContentRow, error) {
	row := q.db.QueryRowContext(ctx, updateThreadContent, arg.ID, arg.Content)
	var i UpdateThreadContentRow
	err := row.Scan(&i.Content, &i.UpdatedTimestamp)
	return i, err
}
