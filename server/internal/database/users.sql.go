// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, password)
VALUES ($1, $2, $3)
RETURNING id, username
`

type CreateUserParams struct {
	ID       uuid.UUID
	Username string
	Password string
}

type CreateUserRow struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT id FROM users
WHERE id = $1
`

func (q *Queries) GetUserID(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserID, id)
	err := row.Scan(&id)
	return id, err
}

const getUserIDAndPassHash = `-- name: GetUserIDAndPassHash :one
SELECT id, password FROM users
WHERE username = $1
`

type GetUserIDAndPassHashRow struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) GetUserIDAndPassHash(ctx context.Context, username string) (GetUserIDAndPassHashRow, error) {
	row := q.db.QueryRowContext(ctx, getUserIDAndPassHash, username)
	var i GetUserIDAndPassHashRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT id, username FROM users
WHERE id = $1
`

type GetUserInfoRow struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) GetUserInfo(ctx context.Context, id uuid.UUID) (GetUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfo, id)
	var i GetUserInfoRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}
