// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (content, thread_id, creator_id)
VALUES ($1, $2, $3)
RETURNING id, content, thread_id, creator_id, created_timestamp, updated_timestamp
`

type CreateCommentParams struct {
	Content   string
	ThreadID  int32
	CreatorID uuid.UUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Content, arg.ThreadID, arg.CreatorID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ThreadID,
		&i.CreatorID,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
DELETE FROM comments
WHERE id = $1
RETURNING id, content, thread_id, creator_id, created_timestamp, updated_timestamp
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, deleteComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ThreadID,
		&i.CreatorID,
		&i.CreatedTimestamp,
		&i.UpdatedTimestamp,
	)
	return i, err
}

const getCommentCreatorID = `-- name: GetCommentCreatorID :one
SELECT creator_id FROM comments
WHERE id = $1
`

func (q *Queries) GetCommentCreatorID(ctx context.Context, id int32) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCommentCreatorID, id)
	var creator_id uuid.UUID
	err := row.Scan(&creator_id)
	return creator_id, err
}

const getThreadCommentsPaginated = `-- name: GetThreadCommentsPaginated :many
SELECT id, content, thread_id, creator_id, created_timestamp, updated_timestamp FROM comments
WHERE thread_id = $1
ORDER BY created_timestamp ASC 
LIMIT $2 OFFSET $3
`

type GetThreadCommentsPaginatedParams struct {
	ThreadID int32
	Limit    int32
	Offset   int32
}

func (q *Queries) GetThreadCommentsPaginated(ctx context.Context, arg GetThreadCommentsPaginatedParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getThreadCommentsPaginated, arg.ThreadID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ThreadID,
			&i.CreatorID,
			&i.CreatedTimestamp,
			&i.UpdatedTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommentContent = `-- name: UpdateCommentContent :one
UPDATE comments
SET content = $2, updated_timestamp = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING content, updated_timestamp
`

type UpdateCommentContentParams struct {
	ID      int32
	Content string
}

type UpdateCommentContentRow struct {
	Content          string
	UpdatedTimestamp time.Time
}

func (q *Queries) UpdateCommentContent(ctx context.Context, arg UpdateCommentContentParams) (UpdateCommentContentRow, error) {
	row := q.db.QueryRowContext(ctx, updateCommentContent, arg.ID, arg.Content)
	var i UpdateCommentContentRow
	err := row.Scan(&i.Content, &i.UpdatedTimestamp)
	return i, err
}
